{"version":3,"sources":["views/Episodios.js","views/Inicio.js","views/Episodio.js","views/Character.js","views/Location.js","App.js","views/Busqueda.js","serviceWorker.js","index.js"],"names":["getEpisodios","gql","Episodios","useState","listaEpisodios","setListaEpisodios","primera","useQuery","fetchPolicy","variables","page","segunda","useEffect","data","oldArray","episodes","results","loading","error","map","episodio","key","id","style","padding","to","name","air_date","episode","Inicio","Episodio","props","idx","parseInt","infoEpisodio","setInfoEpisodio","console","log","characters","char","Character","infoChar","setInfoChar","character","src","image","alt","gender","species","status","location","origin","epi","Location","infoLocation","setInfoLocation","residents","type","dimension","getCharacterByPage","Busqueda","busqueda","query","consultasEpisodios","browserHistory","createBrowserHistory","httpLink","createHttpLink","uri","authLink","setContext","_","a","headers","localStorage","getItem","token","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","caps","i","push","chars","locs","App","history","exact","from","path","component","cap","loc","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0oBAKA,IAAMA,EAAe,kBAAMC,IAAL,MAkEPC,EArDG,WAAO,IAAD,EACwBC,mBAAS,IADjC,mBACbC,EADa,KACGC,EADH,KAEdC,EAAUC,YAASP,IAAgB,CACrCQ,YAAa,WACbC,UAAW,CAAEC,KAAM,KAEjBC,EAAUJ,YAASP,IAAgB,CACrCQ,YAAa,WACbC,UAAW,CAAEC,KAAM,KAoBvB,OAjBAE,qBAAU,WACFN,EAAQO,MAAQF,EAAQE,MACxBR,GAAkB,SAACS,GAAD,4BACXA,GADW,YAEXR,EAAQO,KAAKE,SAASC,SAFX,YAGXL,EAAQE,KAAKE,SAASC,eAGlC,CACCV,EAAQO,KACRP,EAAQW,QACRX,EAAQY,MACRP,EAAQE,KACRF,EAAQM,QACRN,EAAQO,QAGRZ,EAAQW,SAAWN,EAAQM,QACpB,yCAEPX,EAAQY,OAASP,EAAQO,MAElB,sCAIP,6BACKd,EAAee,KAAI,SAACC,GAAD,OAChB,yBAAKC,IAAKD,EAASE,GAAIC,MAAO,CAAEC,QAAS,OACrC,kBAAC,IAAD,CAAMC,GAAI,aAAeL,EAASE,IAC9B,4BACI,2BAAIF,EAASM,QAGrB,mDAAsBN,EAASO,UAC/B,qDAAwBP,EAASQ,eCNtCC,EAjBA,WAUX,OACI,6BACI,kBAAC,EAAD,Q,mSChDZ,IAgEeC,EAlDE,SAACC,GACd,IAAMC,EAAMC,SAASF,EAAMT,IADH,EAEgBnB,mBAAS,IAFzB,mBAEjB+B,EAFiB,KAEHC,EAFG,OAGS5B,YAjBXN,IAAL,KAiBwC,CACrDO,YAAa,WACbC,UAAW,CAAEa,GAAIU,KAFbnB,EAHgB,EAGhBA,KAAMI,EAHU,EAGVA,QAASC,EAHC,EAGDA,MAWvB,OANAN,qBAAU,WACFC,IACAuB,QAAQC,IAAIxB,GACZsB,EAAgBtB,EAAKe,YAE1B,CAACf,EAAMI,EAASC,IACfD,GACAmB,QAAQC,IAAI,0BACL,0CAEPnB,GACAkB,QAAQC,IAAI,SACL,0CAGP,6BACK,IACAH,EAAaI,WACV,6BACI,4BACI,2BAAIJ,EAAaR,OAErB,mDAAsBQ,EAAaP,UACnC,qDAAwBO,EAAaN,SACrC,4BACI,0CAEHM,EAAaI,WAAWnB,KAAI,SAACoB,GAAD,OACzB,yBAAKlB,IAAKkB,EAAKjB,IACX,kBAAC,IAAD,CAAMG,GAAI,cAAgBc,EAAKjB,IAC1BiB,EAAKb,WAMtB,2C,2gBC1DhB,IAwFec,EA9DG,SAACT,GACf,IAAMC,EAAMC,SAASF,EAAMT,IADF,EAEOnB,mBAAS,IAFhB,mBAElBsC,EAFkB,KAERC,EAFQ,OAGQnC,YA7BVN,IAAL,KA6BwC,CACtDO,YAAa,WACbC,UAAW,CAAEa,GAAIU,KAFbnB,EAHiB,EAGjBA,KAAMI,EAHW,EAGXA,QAASC,EAHE,EAGFA,MAUvB,OANAN,qBAAU,WACFC,IACAuB,QAAQC,IAAIxB,GACZ6B,EAAY7B,EAAK8B,cAEtB,CAAC9B,EAAMI,EAASC,IACfD,GACAmB,QAAQC,IAAI,0BACL,0CAEPnB,GACAkB,QAAQC,IAAI,SACL,0CAIP,6BACK,IACAI,EAASb,QACN,6BACI,4BACI,2BAAIa,EAASf,OAEjB,yBAAKkB,IAAKH,EAASI,MAAOC,IAAI,SAJlC,IAKI,yCAAYL,EAASM,QACrB,uCAAaN,EAASO,SACtB,sCAAYP,EAASQ,QACrB,4BACI,4CAEJ,kBAAC,IAAD,CAAMxB,GAAI,aAAegB,EAASS,SAAS5B,IACvC,2BAAImB,EAASS,SAASxB,OAE1B,4BACI,uCAEJ,kBAAC,IAAD,CAAMD,GAAI,aAAegB,EAASU,OAAO7B,IACrC,qCAAWmB,EAASU,OAAOzB,OAE/B,4BACI,yCAEHe,EAASb,QAAQT,KAAI,SAACiC,GAAD,OAClB,yBAAK/B,IAAK+B,EAAI9B,IACV,kBAAC,IAAD,CAAMG,GAAI,aAAe2B,EAAI9B,IAAK8B,EAAI1B,WAKlD,2C,kTClFhB,IAiEe2B,EAlDE,SAACtB,GACd,IAAMC,EAAMC,SAASF,EAAMT,IADH,EAEgBnB,mBAAS,IAFzB,mBAEjBmD,EAFiB,KAEHC,EAFG,OAGShD,YAlBXN,IAAL,KAkBwC,CACrDO,YAAa,WACbC,UAAW,CAAEa,GAAIU,KAFbnB,EAHgB,EAGhBA,KAAMI,EAHU,EAGVA,QAASC,EAHC,EAGDA,MAUvB,OANAN,qBAAU,WACFC,IACAuB,QAAQC,IAAIxB,GACZ0C,EAAgB1C,EAAKqC,aAE1B,CAACrC,EAAMI,EAASC,IACfD,GACAmB,QAAQC,IAAI,0BACL,0CAEPnB,GACAkB,QAAQC,IAAI,SACL,0CAIP,6BACK,IACAiB,EAAaE,UACV,6BACI,4BACI,2BAAIF,EAAa5B,OAErB,oCAAU4B,EAAaG,MACvB,4CAAeH,EAAaI,WAC5B,4BACI,2CAEHJ,EAAaE,UAAUrC,KAAI,SAACoB,GAAD,OACxB,yBAAKlB,IAAKkB,EAAKjB,IACX,kBAAC,IAAD,CAAMG,GAAI,cAAgBc,EAAKjB,IAC1BiB,EAAKb,WAMtB,2C,gPC1BhB,ICjCA,IAAMiC,EAAqB,kBAAM1D,IAAL,MAwLb2D,EA7KE,SAAC7B,GAAW,IAAD,EACoB5B,mBAAS,IAD7B,mBACjBC,EADiB,KACDC,EADC,KAElBwD,EAAW9B,EAAM+B,MAEjBC,EAAqB,CACvBxD,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,KAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,KAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,KAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,KAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,KAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,KAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,KAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,KAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,KAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,MAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,MAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,MAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,MAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,MAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,MAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,MAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,MAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,MAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,MAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,MAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,MAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,MAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,MAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,MAEvBH,YAASoD,IAAsB,CAC3BnD,YAAa,WACbC,UAAW,CAAEC,KAAM,OA8D3B,OA1DAE,qBAAU,WAEDmD,EAAmB,GAAGlD,KACvBkD,EAAmB,GAAGlD,KACtBkD,EAAmB,GAAGlD,KACtBkD,EAAmB,GAAGlD,KACtBkD,EAAmB,GAAGlD,KACtBkD,EAAmB,GAAGlD,KACtBkD,EAAmB,GAAGlD,KACtBkD,EAAmB,GAAGlD,KACtBkD,EAAmB,GAAGlD,KACtBkD,EAAmB,GAAGlD,KACtBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,MAEvBR,EAAkB,CACd0D,EAAmB,GAAGlD,KACtBkD,EAAmB,GAAGlD,KACtBkD,EAAmB,GAAGlD,KACtBkD,EAAmB,GAAGlD,KACtBkD,EAAmB,GAAGlD,KACtBkD,EAAmB,GAAGlD,KACtBkD,EAAmB,GAAGlD,KACtBkD,EAAmB,GAAGlD,KACtBkD,EAAmB,GAAGlD,KACtBkD,EAAmB,GAAGlD,KACtBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,KACvBkD,EAAmB,IAAIlD,SAGhC,CAACkD,IAGA,yCACc3B,QAAQC,IAAIjC,EAAe,IACpCyD,IDvKPG,G,MAAiBC,eAEjBC,EAAWC,YAAe,CAC5BC,IALa,6DAQXC,EAAWC,YAAU,uCAAC,WAAOC,EAAP,oBAAAC,EAAA,6DAAYC,EAAZ,EAAYA,QAAZ,SACJC,aAAaC,QAAQ,gBADjB,cAClBC,EADkB,yBAEjB,CACHH,QAAQ,2BACDA,GADA,IAEHI,cAAeD,EAAK,UAAMA,GAAU,OALpB,2CAAD,yDAUrBE,EAAS,IAAIC,IAAa,CAC5BC,KAAMX,EAASY,OAAOf,GACtBgB,MAAO,IAAIC,MAEXC,EAAO,GACFC,EAAI,EAAGA,EAAI,GAAIA,IACpBD,EAAKE,KAAKD,GAGd,IADA,IAAIE,EAAQ,GACHF,EAAI,EAAGA,EAAI,IAAMA,IACtBE,EAAMD,KAAKD,GAGf,IADA,IAAIG,EAAO,GACFH,EAAI,EAAGA,EAAI,IAAKA,IACrBG,EAAKF,KAAKD,GAmECI,MA/Df,WAAgB,IAAD,EACqBtF,mBAAS,IAD9B,mBACJ0D,EADI,KAQX,OARW,KASP,gCACI,kBAAC,IAAD,CAAgBiB,OAAQA,GACpB,kBAAC,IAAD,CAAQY,QAAS1B,GACb,kBAAC,IAAD,CAAU2B,OAAK,EAACC,KAAK,MAAMnE,GAAG,MAe9B,gCACI,kBAAC,IAAD,CAAMA,GAAG,KACL,4BAAQgC,KAAK,UAAb,UAGR,kBAAC,IAAD,CAAOkC,OAAK,EAACE,KAAM,eAAiBhC,GAChC,kBAAC,EAAD,CAAUC,MAAOD,KAErB,kBAAC,IAAD,CAAOiC,UAAWjE,EAAQ8D,OAAK,EAACE,KAAK,MACpCT,EAAKjE,KAAI,SAAC4E,GAAD,OACN,yBAAK1E,IAAK0E,GACN,kBAAC,IAAD,CAAOJ,OAAK,EAACE,KAAM,aAAeE,GAC9B,kBAAC,EAAD,CAAUzE,GAAIyE,SAIzBR,EAAMpE,KAAI,SAACoB,GAAD,OACP,yBAAKlB,IAAKkB,GACN,kBAAC,IAAD,CAAOoD,OAAK,EAACE,KAAM,cAAgBtD,GAC/B,kBAAC,EAAD,CAAWjB,GAAIiB,SAI1BiD,EAAKrE,KAAI,SAAC6E,GAAD,OACN,yBAAK3E,IAAK2E,GACN,kBAAC,IAAD,CAAOL,OAAK,EAACE,KAAM,aAAeG,GAC9B,kBAAC,EAAD,CAAU1E,GAAI0E,aE5F1BC,QACW,cAA7BC,OAAOhD,SAASiD,UAEe,UAA7BD,OAAOhD,SAASiD,UAEhBD,OAAOhD,SAASiD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9F,GACLkB,QAAQlB,MAAMA,EAAM+F,c","file":"static/js/main.38a613b2.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst getEpisodios = () => gql`\r\n    query episodes($page: Int) {\r\n        episodes(page: $page) {\r\n            results {\r\n                id\r\n                name\r\n                episode\r\n                air_date\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst Episodios = () => {\r\n    const [listaEpisodios, setListaEpisodios] = useState([]);\r\n    const primera = useQuery(getEpisodios(), {\r\n        fetchPolicy: 'no-cache',\r\n        variables: { page: 1 },\r\n    });\r\n    const segunda = useQuery(getEpisodios(), {\r\n        fetchPolicy: 'no-cache',\r\n        variables: { page: 2 },\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (primera.data && segunda.data) {\r\n            setListaEpisodios((oldArray) => [\r\n                ...oldArray,\r\n                ...primera.data.episodes.results,\r\n                ...segunda.data.episodes.results,\r\n            ]);\r\n        }\r\n    }, [\r\n        primera.data,\r\n        primera.loading,\r\n        primera.error,\r\n        segunda.data,\r\n        segunda.loading,\r\n        segunda.error,\r\n    ]);\r\n\r\n    if (primera.loading || segunda.loading) {\r\n        return <div>Cargando</div>;\r\n    }\r\n    if (primera.error || segunda.error) {\r\n        //console.log(listaEpisodios);\r\n        return <div>error</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {listaEpisodios.map((episodio) => (\r\n                <div key={episodio.id} style={{ padding: '20' }}>\r\n                    <Link to={'/episodio/' + episodio.id}>\r\n                        <h1>\r\n                            <p>{episodio.name}</p>\r\n                        </h1>\r\n                    </Link>\r\n                    <p>Fecha de emisión: {episodio.air_date}</p>\r\n                    <p>Código de episodio: {episodio.episode}</p>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Episodios;\r\n","import React from 'react';\r\n//import gql from 'graphql-tag';\r\n//import { useQuery } from '@apollo/react-hooks';\r\nimport Episodios from './Episodios';\r\n\r\n// const getCharacters = () => gql`\r\n//     query characters($page: Int) {\r\n//         characters(page: $page) {\r\n//             results {\r\n//                 id\r\n//                 name\r\n//                 status\r\n//                 species\r\n//                 type\r\n//                 gender\r\n//                 origin {\r\n//                     name\r\n//                     type\r\n//                     dimension\r\n//                 }\r\n//                 location {\r\n//                     name\r\n//                     type\r\n//                     dimension\r\n//                 }\r\n//                 image\r\n//                 episode {\r\n//                     id\r\n//                     name\r\n//                     air_date\r\n//                     episode\r\n//                 }\r\n//                 created\r\n//             }\r\n//             info {\r\n//                 count\r\n//             }\r\n//         }\r\n//     }\r\n// `;\r\n\r\nconst Inicio = () => {\r\n    // const { data, loading, error } = useQuery(getCharacters(1), {\r\n    //     fetchPolicy: 'no-cache',\r\n    // });\r\n\r\n    // useEffect(() => {\r\n    //     if (data) {\r\n    //         console.log(data);\r\n    //     }\r\n    // }, [data, loading, error]);\r\n    return (\r\n        <div>\r\n            <Episodios />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Inicio;\r\n","import React, { useEffect, useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst getEpisodio = () => gql`\r\n    query episode($id: ID) {\r\n        episode(id: $id) {\r\n            name\r\n            air_date\r\n            episode\r\n            characters {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst Episodio = (props) => {\r\n    const idx = parseInt(props.id);\r\n    const [infoEpisodio, setInfoEpisodio] = useState({});\r\n    const { data, loading, error } = useQuery(getEpisodio(), {\r\n        fetchPolicy: 'no-cache',\r\n        variables: { id: idx },\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            console.log(data);\r\n            setInfoEpisodio(data.episode);\r\n        }\r\n    }, [data, loading, error]);\r\n    if (loading) {\r\n        console.log('deberia estar cargadno');\r\n        return <div>Cargando</div>;\r\n    }\r\n    if (error) {\r\n        console.log('error');\r\n        return <div>Cargando</div>;\r\n    }\r\n    return (\r\n        <div>\r\n            {' '}\r\n            {infoEpisodio.characters ? (\r\n                <div>\r\n                    <h1>\r\n                        <p>{infoEpisodio.name}</p>\r\n                    </h1>\r\n                    <p>Fecha de emisión: {infoEpisodio.air_date}</p>\r\n                    <p>Código de episodio: {infoEpisodio.episode}</p>\r\n                    <h1>\r\n                        <p>Personajes</p>\r\n                    </h1>\r\n                    {infoEpisodio.characters.map((char) => (\r\n                        <div key={char.id}>\r\n                            <Link to={'/character/' + char.id}>\r\n                                {char.name}\r\n                            </Link>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <div>Cargando</div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Episodio;\r\n","import React, { useEffect, useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst getCharacter = () => gql`\r\n    query character($id: ID) {\r\n        character(id: $id) {\r\n            id\r\n            name\r\n            status\r\n            species\r\n            type\r\n            gender\r\n            origin {\r\n                id\r\n                name\r\n            }\r\n            location {\r\n                id\r\n                name\r\n            }\r\n            image\r\n            episode {\r\n                name\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst Character = (props) => {\r\n    const idx = parseInt(props.id);\r\n    const [infoChar, setInfoChar] = useState({});\r\n    const { data, loading, error } = useQuery(getCharacter(), {\r\n        fetchPolicy: 'no-cache',\r\n        variables: { id: idx },\r\n    });\r\n    useEffect(() => {\r\n        if (data) {\r\n            console.log(data);\r\n            setInfoChar(data.character);\r\n        }\r\n    }, [data, loading, error]);\r\n    if (loading) {\r\n        console.log('deberia estar cargadno');\r\n        return <div>Cargando</div>;\r\n    }\r\n    if (error) {\r\n        console.log('error');\r\n        return <div>Cargando</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {' '}\r\n            {infoChar.episode ? (\r\n                <div>\r\n                    <h1>\r\n                        <p>{infoChar.name}</p>\r\n                    </h1>\r\n                    <img src={infoChar.image} alt='Logo' />;\r\n                    <p>Género: {infoChar.gender}</p>\r\n                    <p>Especie: {infoChar.species}</p>\r\n                    <p>Estado: {infoChar.status}</p>\r\n                    <h1>\r\n                        <p>Locación:</p>\r\n                    </h1>\r\n                    <Link to={'/location/' + infoChar.location.id}>\r\n                        <p>{infoChar.location.name}</p>\r\n                    </Link>\r\n                    <h1>\r\n                        <p>Origen:</p>\r\n                    </h1>\r\n                    <Link to={'/location/' + infoChar.origin.id}>\r\n                        <p>Origen {infoChar.origin.name}</p>\r\n                    </Link>\r\n                    <h1>\r\n                        <p>Episodios</p>\r\n                    </h1>\r\n                    {infoChar.episode.map((epi) => (\r\n                        <div key={epi.id}>\r\n                            <Link to={'/episodio/' + epi.id}>{epi.name}</Link>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <div>Cargando</div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Character;\r\n","import React, { useEffect, useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst getLocation = () => gql`\r\n    query location($id: ID) {\r\n        location(id: $id) {\r\n            id\r\n            name\r\n            type\r\n            dimension\r\n            residents {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst Location = (props) => {\r\n    const idx = parseInt(props.id);\r\n    const [infoLocation, setInfoLocation] = useState({});\r\n    const { data, loading, error } = useQuery(getLocation(), {\r\n        fetchPolicy: 'no-cache',\r\n        variables: { id: idx },\r\n    });\r\n    useEffect(() => {\r\n        if (data) {\r\n            console.log(data);\r\n            setInfoLocation(data.location);\r\n        }\r\n    }, [data, loading, error]);\r\n    if (loading) {\r\n        console.log('deberia estar cargadno');\r\n        return <div>Cargando</div>;\r\n    }\r\n    if (error) {\r\n        console.log('error');\r\n        return <div>Cargando</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {' '}\r\n            {infoLocation.residents ? (\r\n                <div>\r\n                    <h1>\r\n                        <p>{infoLocation.name}</p>\r\n                    </h1>\r\n                    <p>Tipo: {infoLocation.type}</p>\r\n                    <p>Dimensión: {infoLocation.dimension}</p>\r\n                    <h1>\r\n                        <p>Personajes:</p>\r\n                    </h1>\r\n                    {infoLocation.residents.map((char) => (\r\n                        <div key={char.id}>\r\n                            <Link to={'/character/' + char.id}>\r\n                                {char.name}\r\n                            </Link>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <div>Cargando</div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Location;\r\n","import React, { useState } from 'react';\nimport { Router, Route, Link, Redirect } from 'react-router-dom';\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { setContext } from 'apollo-link-context';\nimport { createBrowserHistory } from 'history';\nimport Inicio from './views/Inicio';\nimport Episodio from './views/Episodio';\nimport Character from './views/Character';\nimport Location from './views/Location';\nimport Busqueda from './views/Busqueda';\nimport './App.css';\n\nconst endPoint = 'https://integracion-rick-morty-api.herokuapp.com/graphql';\n\nconst browserHistory = createBrowserHistory();\n\nconst httpLink = createHttpLink({\n    uri: endPoint,\n});\n\nconst authLink = setContext(async (_, { headers }) => {\n    const token = await localStorage.getItem('currentToken');\n    return {\n        headers: {\n            ...headers,\n            authorization: token ? `${token}` : '',\n        },\n    };\n});\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache(),\n});\nlet caps = [];\nfor (let i = 1; i < 32; i++) {\n    caps.push(i);\n}\nlet chars = [];\nfor (let i = 1; i < 1000; i++) {\n    chars.push(i);\n}\nlet locs = [];\nfor (let i = 1; i < 120; i++) {\n    locs.push(i);\n}\n\n//const location = browserHistory.location;\nfunction App() {\n    const [busqueda, setBusqueda] = useState('');\n    const handleChange = (event) => {\n        setBusqueda(event.target.value);\n    };\n    const handleClick = (event) => {};\n    const handleSubmit = (event) => {};\n\n    return (\n        <center>\n            <ApolloProvider client={client}>\n                <Router history={browserHistory}>\n                    <Redirect exact from='/t5' to='/' />\n                    {/* <center>\n                        <form onSubmit={handleSubmit}>\n                            <input\n                                placeholder='Ingrese su búsqueda'\n                                type='text'\n                                onChange={handleChange}\n                            />\n                            <Link to={'/resultados/' + busqueda}>\n                                <button type='submit' onClick={handleClick}>\n                                    Buscar\n                                </button>\n                            </Link>\n                        </form>\n                    </center> */}\n                    <center>\n                        <Link to='/'>\n                            <button type='button'>Home</button>\n                        </Link>\n                    </center>\n                    <Route exact path={'/resultados/' + busqueda}>\n                        <Busqueda query={busqueda} />\n                    </Route>\n                    <Route component={Inicio} exact path='/' />\n                    {caps.map((cap) => (\n                        <div key={cap}>\n                            <Route exact path={'/episodio/' + cap}>\n                                <Episodio id={cap} />\n                            </Route>\n                        </div>\n                    ))}\n                    {chars.map((char) => (\n                        <div key={char}>\n                            <Route exact path={'/character/' + char}>\n                                <Character id={char} />\n                            </Route>\n                        </div>\n                    ))}\n                    {locs.map((loc) => (\n                        <div key={loc}>\n                            <Route exact path={'/location/' + loc}>\n                                <Location id={loc} />\n                            </Route>\n                        </div>\n                    ))}\n                </Router>\n            </ApolloProvider>\n        </center>\n    );\n}\n\nexport default App;\n","import React, { useEffect, useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst getCharacterByPage = () => gql`\r\n    query characters($page: Int) {\r\n        characters(page: $page) {\r\n            results {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst Busqueda = (props) => {\r\n    const [listaEpisodios, setListaEpisodios] = useState([]);\r\n    const busqueda = props.query;\r\n\r\n    const consultasEpisodios = [\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 1 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 2 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 3 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 4 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 5 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 6 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 7 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 8 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 9 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 10 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 11 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 12 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 13 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 14 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 15 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 16 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 17 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 18 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 19 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 20 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 21 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 22 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 23 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 24 },\r\n        }),\r\n        useQuery(getCharacterByPage(), {\r\n            fetchPolicy: 'no-cache',\r\n            variables: { page: 25 },\r\n        }),\r\n    ];\r\n\r\n    useEffect(() => {\r\n        if (\r\n            (consultasEpisodios[0].data,\r\n            consultasEpisodios[1].data,\r\n            consultasEpisodios[2].data,\r\n            consultasEpisodios[3].data,\r\n            consultasEpisodios[4].data,\r\n            consultasEpisodios[5].data,\r\n            consultasEpisodios[6].data,\r\n            consultasEpisodios[7].data,\r\n            consultasEpisodios[8].data,\r\n            consultasEpisodios[9].data,\r\n            consultasEpisodios[10].data,\r\n            consultasEpisodios[11].data,\r\n            consultasEpisodios[12].data,\r\n            consultasEpisodios[13].data,\r\n            consultasEpisodios[14].data,\r\n            consultasEpisodios[15].data,\r\n            consultasEpisodios[16].data,\r\n            consultasEpisodios[17].data,\r\n            consultasEpisodios[18].data,\r\n            consultasEpisodios[19].data,\r\n            consultasEpisodios[20].data,\r\n            consultasEpisodios[21].data,\r\n            consultasEpisodios[22].data,\r\n            consultasEpisodios[23].data,\r\n            consultasEpisodios[24].data)\r\n        ) {\r\n            setListaEpisodios([\r\n                consultasEpisodios[0].data,\r\n                consultasEpisodios[1].data,\r\n                consultasEpisodios[2].data,\r\n                consultasEpisodios[3].data,\r\n                consultasEpisodios[4].data,\r\n                consultasEpisodios[5].data,\r\n                consultasEpisodios[6].data,\r\n                consultasEpisodios[7].data,\r\n                consultasEpisodios[8].data,\r\n                consultasEpisodios[9].data,\r\n                consultasEpisodios[10].data,\r\n                consultasEpisodios[11].data,\r\n                consultasEpisodios[12].data,\r\n                consultasEpisodios[13].data,\r\n                consultasEpisodios[14].data,\r\n                consultasEpisodios[15].data,\r\n                consultasEpisodios[16].data,\r\n                consultasEpisodios[17].data,\r\n                consultasEpisodios[18].data,\r\n                consultasEpisodios[19].data,\r\n                consultasEpisodios[20].data,\r\n                consultasEpisodios[21].data,\r\n                consultasEpisodios[22].data,\r\n                consultasEpisodios[23].data,\r\n                consultasEpisodios[24].data,\r\n            ]);\r\n        }\r\n    }, [consultasEpisodios]);\r\n\r\n    return (\r\n        <div>\r\n            Busqueda {console.log(listaEpisodios[0])}\r\n            {busqueda}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Busqueda;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}