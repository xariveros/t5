{"version":3,"sources":["views/Episodios.js","views/Inicio.js","Routes.js","views/Episodio.js","views/Character.js","App.js","views/Location.js","serviceWorker.js","index.js"],"names":["getEpisodios","gql","Episodios","useState","listaEpisodios","setListaEpisodios","primera","useQuery","fetchPolicy","variables","page","segunda","useEffect","data","console","log","oldArray","episodes","results","loading","error","map","episodio","key","id","style","padding","to","name","air_date","Inicio","Episodio","props","idx","parseInt","infoEpisodio","setInfoEpisodio","listaChars","setListaChars","episode","characters","char","caps","i","push","Character","infoChar","setInfoChar","character","src","image","alt","gender","species","status","location","origin","epi","Location","infoLocation","setInfoLocation","residents","type","dimension","browserHistory","createBrowserHistory","httpLink","createHttpLink","uri","authLink","setContext","_","a","headers","localStorage","getItem","token","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","chars","locs","App","history","component","exact","path","cap","loc","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1af54348.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst getEpisodios = () => gql`\r\n    query episodes($page: Int) {\r\n        episodes(page: $page) {\r\n            results {\r\n                id\r\n                name\r\n                episode\r\n                air_date\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst Episodios = () => {\r\n    const [listaEpisodios, setListaEpisodios] = useState([]);\r\n    const [listaEpisodios2, setListaEpisodios2] = useState([]);\r\n    const primera = useQuery(getEpisodios(), {\r\n        fetchPolicy: 'no-cache',\r\n        variables: { page: 1 },\r\n    });\r\n    const segunda = useQuery(getEpisodios(), {\r\n        fetchPolicy: 'no-cache',\r\n        variables: { page: 2 },\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (primera.data && segunda.data) {\r\n            console.log(primera.data);\r\n            setListaEpisodios((oldArray) => [\r\n                ...oldArray,\r\n                ...primera.data.episodes.results,\r\n                ...segunda.data.episodes.results,\r\n            ]);\r\n        }\r\n    }, [\r\n        primera.data,\r\n        primera.loading,\r\n        primera.error,\r\n        segunda.data,\r\n        segunda.loading,\r\n        segunda.error,\r\n    ]);\r\n\r\n    if (primera.loading || segunda.loading) {\r\n        console.log('deberia estar cargadno');\r\n        return <div>Cargando</div>;\r\n    }\r\n    if (primera.error || segunda.error) {\r\n        console.log('error');\r\n        //console.log(listaEpisodios);\r\n        return <div>error</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {listaEpisodios.map((episodio) => (\r\n                <div key={episodio.id} style={{ padding: '20' }}>\r\n                    <p>{episodio.id}</p>\r\n                    <Link to={'/episodio/' + episodio.id}>\r\n                        <p>{episodio.name}</p>\r\n                    </Link>\r\n                    <p>{episodio.air_date}</p>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Episodios;\r\n","import React, { useEffect } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport Episodios from './Episodios';\r\n\r\nconst getCharacters = () => gql`\r\n    query characters($page: Int) {\r\n        characters(page: $page) {\r\n            results {\r\n                id\r\n                name\r\n                status\r\n                species\r\n                type\r\n                gender\r\n                origin {\r\n                    name\r\n                    type\r\n                    dimension\r\n                }\r\n                location {\r\n                    name\r\n                    type\r\n                    dimension\r\n                }\r\n                image\r\n                episode {\r\n                    id\r\n                    name\r\n                    air_date\r\n                    episode\r\n                }\r\n                created\r\n            }\r\n            info {\r\n                count\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst Inicio = () => {\r\n    const { data, loading, error } = useQuery(getCharacters(1), {\r\n        fetchPolicy: 'no-cache',\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            console.log(data);\r\n        }\r\n    }, [data, loading, error]);\r\n    return (\r\n        <div>\r\n            <Episodios />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Inicio;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Switch, Redirect, Route } from 'react-router-dom';\r\nimport Inicio from './views/Inicio';\r\nimport Episodio from './views/Episodio';\r\nlet caps = [];\r\nfor (let i = 1; i < 32; i++) {\r\n    caps.push(i);\r\n}\r\nconsole.log(caps);\r\nconst Routes = (props) => {\r\n    const location = props.location;\r\n    return (\r\n        <Switch>\r\n            <Route component={Inicio} exact path='/' />\r\n            {caps.map((cap) => (\r\n                <div key={cap}>\r\n                    <Route exact path={'/episodio/' + cap}>\r\n                        <Episodio id={cap} />\r\n                    </Route>\r\n                </div>\r\n            ))}\r\n\r\n            <Redirect to='/' />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import React, { useEffect, useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst getEpisodio = () => gql`\r\n    query episode($id: ID) {\r\n        episode(id: $id) {\r\n            name\r\n            air_date\r\n            episode\r\n            characters {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst Episodio = (props) => {\r\n    const idx = parseInt(props.id);\r\n    const [infoEpisodio, setInfoEpisodio] = useState({});\r\n    const [listaChars, setListaChars] = useState([]);\r\n    const { data, loading, error } = useQuery(getEpisodio(), {\r\n        fetchPolicy: 'no-cache',\r\n        variables: { id: idx },\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            console.log(data);\r\n            setInfoEpisodio(data.episode);\r\n            setListaChars(data.episode.characters);\r\n        }\r\n    }, [data, loading, error]);\r\n    if (loading) {\r\n        console.log('deberia estar cargadno');\r\n        return <div>Cargando</div>;\r\n    }\r\n    if (error) {\r\n        console.log('error');\r\n        return <div>Cargando</div>;\r\n    }\r\n    return (\r\n        <div>\r\n            {' '}\r\n            {infoEpisodio.characters ? (\r\n                <div>\r\n                    {console.log(infoEpisodio.characters, listaChars)}\r\n                    <p>{infoEpisodio.name}</p>\r\n                    <p>{infoEpisodio.air_date}</p>\r\n                    <p>{infoEpisodio.episode}</p>\r\n                    {infoEpisodio.characters.map((char) => (\r\n                        <div key={char.id}>\r\n                            <Link to={'/character/' + char.id}>\r\n                                {char.name}\r\n                            </Link>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <div>Cargando</div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Episodio;\r\n","import React, { useEffect, useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst getCharacter = () => gql`\r\n    query character($id: ID) {\r\n        character(id: $id) {\r\n            id\r\n            name\r\n            status\r\n            species\r\n            type\r\n            gender\r\n            origin {\r\n                id\r\n                name\r\n            }\r\n            location {\r\n                id\r\n                name\r\n            }\r\n            image\r\n            episode {\r\n                name\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst Character = (props) => {\r\n    const idx = parseInt(props.id);\r\n    const [infoChar, setInfoChar] = useState({});\r\n    const { data, loading, error } = useQuery(getCharacter(), {\r\n        fetchPolicy: 'no-cache',\r\n        variables: { id: idx },\r\n    });\r\n    useEffect(() => {\r\n        if (data) {\r\n            console.log(data);\r\n            setInfoChar(data.character);\r\n        }\r\n    }, [data, loading, error]);\r\n    if (loading) {\r\n        console.log('deberia estar cargadno');\r\n        return <div>Cargando</div>;\r\n    }\r\n    if (error) {\r\n        console.log('error');\r\n        return <div>Cargando</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {' '}\r\n            {infoChar.episode ? (\r\n                <div>\r\n                    {console.log(infoChar.characters, infoChar)}\r\n                    <p>{infoChar.id}</p>\r\n                    <p>{infoChar.name}</p>\r\n                    <img src={infoChar.image} alt='Logo' />;\r\n                    <p>{infoChar.gender}</p>\r\n                    <p>{infoChar.species}</p>\r\n                    <p>{infoChar.status}</p>\r\n                    <Link to={'/location/' + infoChar.location.id}>\r\n                        <p>{infoChar.location.name}</p>\r\n                    </Link>\r\n                    <Link to={'/location/' + infoChar.origin.id}>\r\n                        <p>{infoChar.origin.name}</p>\r\n                    </Link>\r\n                    {infoChar.episode.map((epi) => (\r\n                        <div key={epi.id}>\r\n                            <Link to={'/episodio/' + epi.id}>{epi.name}</Link>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <div>Cargando</div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Character;\r\n","import React from 'react';\nimport { Router, Route, Link } from 'react-router-dom';\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { setContext } from 'apollo-link-context';\nimport { createBrowserHistory } from 'history';\nimport Routes from './Routes';\nimport Inicio from './views/Inicio';\nimport Episodio from './views/Episodio';\nimport Character from './views/Character';\nimport Location from './views/Location';\nimport './App.css';\n\nconst endPoint = 'https://integracion-rick-morty-api.herokuapp.com/graphql';\n\nconst browserHistory = createBrowserHistory();\n\nconst httpLink = createHttpLink({\n    uri: endPoint,\n});\n\nconst authLink = setContext(async (_, { headers }) => {\n    const token = await localStorage.getItem('currentToken');\n    return {\n        headers: {\n            ...headers,\n            authorization: token ? `${token}` : '',\n        },\n    };\n});\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache(),\n});\nlet caps = [];\nfor (let i = 1; i < 32; i++) {\n    caps.push(i);\n}\nlet chars = [];\nfor (let i = 1; i < 1000; i++) {\n    chars.push(i);\n}\nlet locs = [];\nfor (let i = 1; i < 120; i++) {\n    locs.push(i);\n}\n\nconst location = browserHistory.location;\nfunction App() {\n    return (\n        <ApolloProvider client={client}>\n            <Router history={browserHistory}>\n                <center>\n                    <Link to='/'>\n                        <button type='button'>Home</button>\n                    </Link>\n                </center>\n                <Route component={Inicio} exact path='/' />\n                {caps.map((cap) => (\n                    <div key={cap}>\n                        <Route exact path={'/episodio/' + cap}>\n                            <Episodio id={cap} />\n                        </Route>\n                    </div>\n                ))}\n                {chars.map((char) => (\n                    <div key={char}>\n                        <Route exact path={'/character/' + char}>\n                            <Character id={char} />\n                        </Route>\n                    </div>\n                ))}\n                {locs.map((loc) => (\n                    <div key={loc}>\n                        <Route exact path={'/location/' + loc}>\n                            <Location id={loc} />\n                        </Route>\n                    </div>\n                ))}\n            </Router>\n        </ApolloProvider>\n    );\n}\n\nexport default App;\n","import React, { useEffect, useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst getLocation = () => gql`\r\n    query location($id: ID) {\r\n        location(id: $id) {\r\n            id\r\n            name\r\n            type\r\n            dimension\r\n            residents {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst Location = (props) => {\r\n    const idx = parseInt(props.id);\r\n    const [infoLocation, setInfoLocation] = useState({});\r\n    const { data, loading, error } = useQuery(getLocation(), {\r\n        fetchPolicy: 'no-cache',\r\n        variables: { id: idx },\r\n    });\r\n    useEffect(() => {\r\n        if (data) {\r\n            console.log(data);\r\n            setInfoLocation(data.location);\r\n        }\r\n    }, [data, loading, error]);\r\n    if (loading) {\r\n        console.log('deberia estar cargadno');\r\n        return <div>Cargando</div>;\r\n    }\r\n    if (error) {\r\n        console.log('error');\r\n        return <div>Cargando</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {' '}\r\n            {infoLocation.residents ? (\r\n                <div>\r\n                    {console.log(infoLocation.characters, infoLocation)}\r\n                    <p>{infoLocation.id}</p>\r\n                    <p>{infoLocation.name}</p>\r\n                    <p>{infoLocation.type}</p>\r\n                    <p>{infoLocation.dimension}</p>\r\n                    {infoLocation.residents.map((char) => (\r\n                        <div key={char.id}>\r\n                            <Link to={'/character/' + char.id}>\r\n                                {char.name}\r\n                            </Link>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <div>Cargando</div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Location;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}